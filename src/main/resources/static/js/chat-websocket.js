/**
 * Chat WebSocket Manager - T∆∞∆°ng t·ª± nh∆∞ notifications.js
 */
(() => {
    let chatWebSocket = null;
    let isConnected = false;
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 5;
    let reconnectTimeout = null;
    
    // Kh·ªüi t·∫°o WebSocket connection
    async function initializeChatWebSocket() {
        if (chatWebSocket && chatWebSocket.readyState === WebSocket.OPEN) {
            console.log('Chat WebSocket already connected');
            return;
        }
        
        try {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            
            // Ki·ªÉm tra cache tr∆∞·ªõc
            let userId = null;
            if (window.currentUser && window.currentUser.id) {
                userId = window.currentUser.id;
            } else {
                userId = await getCurrentUserId();
            }
            
            if (!userId) {
                console.error('‚ùå Cannot get current user ID for WebSocket connection');
                fallbackToPolling();
                return;
            }
            
            const wsUrl = `${protocol}//${window.location.host}/ws/chat?userId=${userId}`;
            
            console.log('üîó Connecting to Chat WebSocket:', wsUrl);
            
            chatWebSocket = new WebSocket(wsUrl);
            
            chatWebSocket.onopen = function(event) {
                console.log('‚úÖ Chat WebSocket connected');
                isConnected = true;
                reconnectAttempts = 0;
            };
            
            chatWebSocket.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    handleChatWebSocketMessage(data);
                } catch (error) {
                    console.error('‚ùå Error parsing chat WebSocket message:', error);
                }
            };
            
            chatWebSocket.onclose = function(event) {
                console.log('üîå Chat WebSocket disconnected:', event.code, event.reason);
                isConnected = false;
                chatWebSocket = null;
                
                // T·ª± ƒë·ªông reconnect n·∫øu ch∆∞a ƒë·∫°t max attempts
                if (reconnectAttempts < maxReconnectAttempts) {
                    reconnectAttempts++;
                    const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 30000); // Exponential backoff
                    console.log(`üîÑ Reconnecting chat WebSocket in ${delay}ms (attempt ${reconnectAttempts}/${maxReconnectAttempts})`);
                    
                    reconnectTimeout = setTimeout(async () => {
                        await initializeChatWebSocket();
                    }, delay);
                } else {
                    console.log('‚ùå Max reconnection attempts reached for chat WebSocket');
                    fallbackToPolling();
                }
            };
            
            chatWebSocket.onerror = function(error) {
                console.error('‚ùå Chat WebSocket error:', error);
            };
            
        } catch (error) {
            console.error('‚ùå Error initializing chat WebSocket:', error);
            fallbackToPolling();
        }
    }
    
    // G·ª≠i message qua WebSocket
    function sendChatMessage(message) {
        if (chatWebSocket && chatWebSocket.readyState === WebSocket.OPEN) {
            try {
                chatWebSocket.send(JSON.stringify(message));
                return true;
            } catch (error) {
                console.error('‚ùå Error sending chat WebSocket message:', error);
                return false;
            }
        } else {
            console.warn('‚ö†Ô∏è Chat WebSocket not connected, cannot send message');
            return false;
        }
    }
    
    // X·ª≠ l√Ω message t·ª´ WebSocket
    function handleChatWebSocketMessage(data) {
        console.log('üì® Chat WebSocket message received:', data);
            
            switch (data.type) {
            case 'CONNECTION_ESTABLISHED':
                console.log('‚úÖ Chat WebSocket connection confirmed');
                    break;
                
            case 'NEW_MESSAGE':
                handleNewMessage(data.message);
                    break;
                
            case 'MESSAGE_READ':
                handleMessageRead(data);
                    break;
                
                
            case 'USER_ONLINE':
                handleUserOnline(data);
                break;
                
            case 'USER_OFFLINE':
                handleUserOffline(data);
                break;
                
            default:
                console.log('‚ùì Unknown chat WebSocket message type:', data.type);
        }
    }
    
    // X·ª≠ l√Ω tin nh·∫Øn m·ªõi
    function handleNewMessage(messageData) {
        console.log('üí¨ New message received:', messageData);
        console.log('üí¨ Current room ID:', window.chatManager ? window.chatManager.currentRoomId : 'No chatManager');
        console.log('üí¨ Message room ID:', messageData.roomId);
        
        // N·∫øu ƒëang ·ªü room n√†y, th√™m message v√†o UI
        if (window.chatManager && window.chatManager.currentRoomId == messageData.roomId) {
            console.log('üí¨ Adding message to UI');
            window.chatManager.addMessageToUI(messageData);
        } else {
            console.log('üí¨ Not in this room, skipping UI update');
            console.log('üí¨ Current room ID type:', typeof window.chatManager.currentRoomId);
            console.log('üí¨ Message room ID type:', typeof messageData.roomId);
        }
        
        // C·∫≠p nh·∫≠t danh s√°ch rooms ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn m·ªõi nh·∫•t
        if (window.chatManager) {
            window.chatManager.updateRoomLastMessage(messageData.roomId, messageData);
        }
        
        // Hi·ªÉn th·ªã notification n·∫øu kh√¥ng ph·∫£i tin nh·∫Øn c·ªßa m√¨nh
        const currentUserId = getCurrentUserIdSync();
        if (currentUserId && messageData.senderId !== currentUserId) {
            showChatNotification(messageData);
        }
    }
    
    // X·ª≠ l√Ω message read status
    function handleMessageRead(data) {
        console.log('üëÅÔ∏è Message read status updated:', data);
        
        // C·∫≠p nh·∫≠t UI ƒë·ªÉ hi·ªÉn th·ªã "ƒë√£ xem" cho tin nh·∫Øn cu·ªëi c√πng
        if (window.chatManager && window.chatManager.currentRoomId === data.roomId) {
            window.chatManager.updateMessageReadStatus(data.roomId);
        }
    }
    
    
    // X·ª≠ l√Ω user online
    function handleUserOnline(data) {
        console.log('üü¢ User online:', data);
        
        if (window.chatManager) {
            window.chatManager.updateUserOnlineStatus(data.userId, true);
        }
    }
    
    // X·ª≠ l√Ω user offline
    function handleUserOffline(data) {
        console.log('üî¥ User offline:', data);
        
        if (window.chatManager) {
            window.chatManager.updateUserOnlineStatus(data.userId, false);
        }
    }
    
    // Hi·ªÉn th·ªã notification cho tin nh·∫Øn m·ªõi
    function showChatNotification(messageData) {
        if (window.toastManager) {
            const notificationText = `${messageData.senderName}: ${messageData.content}`;
            window.toastManager.info(notificationText);
        }
    }
    
    // Fallback v·ªÅ polling n·∫øu WebSocket kh√¥ng ho·∫°t ƒë·ªông
    function fallbackToPolling() {
        console.log('üîÑ Falling back to polling for chat');
        
        // Polling s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi chat-simple.js
        if (window.chatManager) {
            window.chatManager.startPolling();
        }
    }
    
    // L·∫•y current user ID (gi·ªëng nh∆∞ websocket-manager.js)
    async function getCurrentUserId() {
        try {
            // Ki·ªÉm tra cache tr∆∞·ªõc
            if (window.currentUser && window.currentUser.id) {
                return window.currentUser.id;
            }
            
            // G·ªçi API /me ƒë·ªÉ l·∫•y th√¥ng tin user
            const response = await fetch('/api/auth/me', {
                method: 'GET',
                credentials: 'include'
            });
            
            if (response.ok) {
                const userData = await response.json();
                if (userData.id) {
                    // L∆∞u v√†o cache ƒë·ªÉ l·∫ßn sau s·ª≠ d·ª•ng
                    window.currentUser = userData;
                    return userData.id;
                }
            }
            
            return null;
        } catch (error) {
            console.error('Error getting current user ID:', error);
            return null;
        }
    }
    
    // L·∫•y current user ID t·ª´ cache (synchronous)
    function getCurrentUserIdSync() {
        return window.currentUser ? window.currentUser.id : null;
    }
    
    // Public API
    window.chatWebSocketManager = {
        // K·∫øt n·ªëi WebSocket
        connect: initializeChatWebSocket,
        
        // Ng·∫Øt k·∫øt n·ªëi
        disconnect: function() {
            if (chatWebSocket) {
                chatWebSocket.close();
                chatWebSocket = null;
            }
            if (reconnectTimeout) {
                clearTimeout(reconnectTimeout);
                reconnectTimeout = null;
            }
        },
        
        // G·ª≠i message
        send: sendChatMessage,
        
        // Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
        isConnected: function() {
            return isConnected && chatWebSocket && chatWebSocket.readyState === WebSocket.OPEN;
        },
        
        // Join room
        joinRoom: function(roomId) {
            sendChatMessage({
                type: 'JOIN_ROOM',
                roomId: roomId
            });
        },
        
        // Leave room
        leaveRoom: function(roomId) {
            sendChatMessage({
                type: 'LEAVE_ROOM',
                roomId: roomId
            });
        },
        
        
        // G·ª≠i message read status
        sendMessageRead: function(roomId) {
            sendChatMessage({
                type: 'MESSAGE_READ',
                roomId: roomId
            });
        },
        
        // L·∫•y current user ID
        getCurrentUserId: getCurrentUserIdSync
    };
    
    // T·ª± ƒë·ªông kh·ªüi t·∫°o khi DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', async () => {
            await initializeChatWebSocket();
        });
    } else {
        initializeChatWebSocket();
    }
    
})();
