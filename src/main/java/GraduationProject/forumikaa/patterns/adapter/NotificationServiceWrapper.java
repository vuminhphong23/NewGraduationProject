package GraduationProject.forumikaa.patterns.adapter;

import GraduationProject.forumikaa.entity.Notification;
import GraduationProject.forumikaa.patterns.singleton.NotificationServiceImpl;
import GraduationProject.forumikaa.patterns.proxy.AccessControlProxy;
import GraduationProject.forumikaa.patterns.decorator.NotificationServiceComponent;
import GraduationProject.forumikaa.patterns.decorator.LoggingNotificationServiceDecorator;
import GraduationProject.forumikaa.patterns.decorator.CachingNotificationServiceDecorator;
import GraduationProject.forumikaa.service.NotificationService;
import GraduationProject.forumikaa.handler.notification.NotificationBroadcaster;
import GraduationProject.forumikaa.dao.NotificationDao;
import GraduationProject.forumikaa.dao.UserDao;
import GraduationProject.forumikaa.dao.CommentDao;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Map;

/**
 * NotificationServiceWrapper - Adapter Pattern Implementation
 * L√†m c·∫ßu n·ªëi gi·ªØa Spring Dependency Injection v√† Singleton Pattern
 * T√çCH H·ª¢P PROXY PATTERN ƒë·ªÉ th√™m access control
 * 
 * V·∫•n ƒë·ªÅ: Spring kh√¥ng th·ªÉ qu·∫£n l√Ω Singleton instance
 * Gi·∫£i ph√°p: T·∫°o wrapper class implement NotificationService interface
 * B√™n trong wrapper s·ª≠ d·ª•ng Singleton instance + Proxy Pattern
 */
@Service
public class NotificationServiceWrapper implements NotificationService {
    
    private final NotificationServiceImpl singletonService;
    private final AccessControlProxy accessControlProxy;
    private final NotificationServiceComponent decoratedService;
    
    public NotificationServiceWrapper() {
        // L·∫•y singleton instance
        this.singletonService = NotificationServiceImpl.getInstance();
        
        // T·∫°o AccessControlProxy ƒë·ªÉ ki·ªÉm so√°t quy·ªÅn truy c·∫≠p
        this.accessControlProxy = new AccessControlProxy(singletonService);
        
        // T·∫°o decorated service v·ªõi Caching + Logging
        NotificationServiceComponent baseService = new NotificationServiceComponent() {
            // Implement t·∫•t c·∫£ methods ƒë·ªÉ delegate ƒë·∫øn accessControlProxy
            @Override
            public GraduationProject.forumikaa.entity.Notification createNotification(Long recipientId, Long senderId, String message, String link) {
                return accessControlProxy.createNotification(recipientId, senderId, message, link);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createNotification(Long recipientId, Long senderId, String message) {
                return accessControlProxy.createNotification(recipientId, senderId, message);
            }
            
            @Override
            public java.util.List<GraduationProject.forumikaa.entity.Notification> getUserNotifications(Long userId) {
                return accessControlProxy.getUserNotifications(userId);
            }
            
            @Override
            public Long getUnreadCount(Long userId) {
                return accessControlProxy.getUnreadCount(userId);
            }
            
            @Override
            public void markAsRead(Long notificationId) {
                try {
                    System.out.println("üîÑ BaseService: Calling accessControlProxy.markAsRead(" + notificationId + ")");
                    accessControlProxy.markAsRead(notificationId);
                    System.out.println("‚úÖ BaseService: accessControlProxy.markAsRead(" + notificationId + ") completed successfully");
                } catch (Exception e) {
                    System.err.println("‚ùå BaseService: Error in markAsRead(" + notificationId + "): " + e.getMessage());
                    e.printStackTrace();
                    throw e;
                }
            }
            
            @Override
            public void markAllAsRead(Long userId) {
                try {
                    System.out.println("üîÑ BaseService: Calling accessControlProxy.markAllAsRead(" + userId + ")");
                    accessControlProxy.markAllAsRead(userId);
                    System.out.println("‚úÖ BaseService: accessControlProxy.markAllAsRead(" + userId + ") completed successfully");
                } catch (Exception e) {
                    System.err.println("‚ùå BaseService: Error in markAllAsRead(" + userId + "): " + e.getMessage());
                    e.printStackTrace();
                    throw e;
                }
            }
            
            @Override
            public java.util.List<java.util.Map<String, Object>> getNotificationDtos(Long userId) {
                return accessControlProxy.getNotificationDtos(userId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createPostLikeNotification(Long postId, Long postAuthorId, Long likerId) {
                return accessControlProxy.createPostLikeNotification(postId, postAuthorId, likerId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createPostCommentNotification(Long postId, Long postAuthorId, Long commenterId, Long commentId) {
                return accessControlProxy.createPostCommentNotification(postId, postAuthorId, commenterId, commentId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createCommentLikeNotification(Long commentId, Long commentAuthorId, Long likerId) {
                return accessControlProxy.createCommentLikeNotification(commentId, commentAuthorId, likerId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createCommentReplyNotification(Long parentCommentId, Long parentCommentAuthorId, Long replierId, Long replyId) {
                return accessControlProxy.createCommentReplyNotification(parentCommentId, parentCommentAuthorId, replierId, replyId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createFriendshipRequestNotification(Long recipientId, Long senderId) {
                return accessControlProxy.createFriendshipRequestNotification(recipientId, senderId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createFriendshipAcceptedNotification(Long recipientId, Long senderId) {
                return accessControlProxy.createFriendshipAcceptedNotification(recipientId, senderId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createFriendshipRejectedNotification(Long recipientId, Long senderId) {
                return accessControlProxy.createFriendshipRejectedNotification(recipientId, senderId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createFriendshipCancelledNotification(Long recipientId, Long senderId) {
                return accessControlProxy.createFriendshipCancelledNotification(recipientId, senderId);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createMentionNotification(Long mentionedUserId, Long mentionerId, Long entityId, String entityType) {
                return accessControlProxy.createMentionNotification(mentionedUserId, mentionerId, entityId, entityType);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createSystemNotification(Long userId, String message) {
                return accessControlProxy.createSystemNotification(userId, message);
            }
            
            @Override
            public GraduationProject.forumikaa.entity.Notification createWelcomeNotification(Long userId) {
                return accessControlProxy.createWelcomeNotification(userId);
            }
        };
        
        // Wrap v·ªõi Logging Decorator
        NotificationServiceComponent loggingService = new LoggingNotificationServiceDecorator(baseService);
        
        // Wrap v·ªõi Caching Decorator
        this.decoratedService = new CachingNotificationServiceDecorator(loggingService, 5);
        
        // Kh·ªüi t·∫°o v·ªõi dependencies (s·∫Ω ƒë∆∞·ª£c inject sau)
        // Trong th·ª±c t·∫ø, b·∫°n c√≥ th·ªÉ inject c√°c dependencies c·∫ßn thi·∫øt
        // T·∫°m th·ªùi kh√¥ng kh·ªüi t·∫°o ƒë·ªÉ tr√°nh l·ªói
        System.out.println("‚ö†Ô∏è NotificationServiceWrapper: Singleton ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi dependencies th·∫≠t");
        System.out.println("   S·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o t·ª´ NotificationConfig sau khi Spring context ƒë∆∞·ª£c t·∫°o");
    }
    
    // Core notification methods - delegate to decorated service
    @Override
    public Notification createNotification(Long recipientId, Long senderId, String message, String link) {
        return decoratedService.createNotification(recipientId, senderId, message, link);
    }
    
    @Override
    public Notification createNotification(Long recipientId, Long senderId, String message) {
        return decoratedService.createNotification(recipientId, senderId, message);
    }
    
    @Override
    public List<Notification> getUserNotifications(Long userId) {
        return decoratedService.getUserNotifications(userId);
    }
    
    @Override
    public Long getUnreadCount(Long userId) {
        return decoratedService.getUnreadCount(userId);
    }
    
    @Override
    public void markAsRead(Long notificationId) {
        decoratedService.markAsRead(notificationId);
    }
    
    @Override
    public void markAllAsRead(Long userId) {
        decoratedService.markAllAsRead(userId);
    }
    
    @Override
    public List<Map<String, Object>> getNotificationDtos(Long userId) {
        return decoratedService.getNotificationDtos(userId);
    }
    
    // Specific notification creation methods - delegate to decorated service
    @Override
    public Notification createPostLikeNotification(Long postId, Long postAuthorId, Long likerId) {
        return decoratedService.createPostLikeNotification(postId, postAuthorId, likerId);
    }
    
    @Override
    public Notification createPostCommentNotification(Long postId, Long postAuthorId, Long commenterId, Long commentId) {
        return decoratedService.createPostCommentNotification(postId, postAuthorId, commenterId, commentId);
    }
    
    @Override
    public Notification createCommentLikeNotification(Long commentId, Long commentAuthorId, Long likerId) {
        return decoratedService.createCommentLikeNotification(commentId, commentAuthorId, likerId);
    }
    
    @Override
    public Notification createCommentReplyNotification(Long parentCommentId, Long parentCommentAuthorId, Long replierId, Long replyId) {
        return decoratedService.createCommentReplyNotification(parentCommentId, parentCommentAuthorId, replierId, replyId);
    }
    
    @Override
    public Notification createFriendshipRequestNotification(Long recipientId, Long senderId) {
        return decoratedService.createFriendshipRequestNotification(recipientId, senderId);
    }
    
    @Override
    public Notification createFriendshipAcceptedNotification(Long recipientId, Long senderId) {
        return decoratedService.createFriendshipAcceptedNotification(recipientId, senderId);
    }
    
    @Override
    public Notification createFriendshipRejectedNotification(Long recipientId, Long senderId) {
        return decoratedService.createFriendshipRejectedNotification(recipientId, senderId);
    }
    
    @Override
    public Notification createFriendshipCancelledNotification(Long recipientId, Long senderId) {
        return decoratedService.createFriendshipCancelledNotification(recipientId, senderId);
    }
    
    @Override
    public Notification createMentionNotification(Long mentionedUserId, Long mentionerId, Long entityId, String entityType) {
        return decoratedService.createMentionNotification(mentionedUserId, mentionerId, entityId, entityType);
    }
    
    @Override
    public Notification createSystemNotification(Long userId, String message) {
        return decoratedService.createSystemNotification(userId, message);
    }
    
    @Override
    public Notification createWelcomeNotification(Long userId) {
        return decoratedService.createWelcomeNotification(userId);
    }
    
    /**
     * Method ƒë·ªÉ truy c·∫≠p tr·ª±c ti·∫øp singleton instance n·∫øu c·∫ßn
     */
    public NotificationServiceImpl getSingletonInstance() {
        return singletonService;
    }
    
    /**
     * Method ƒë·ªÉ truy c·∫≠p access control proxy
     */
    public AccessControlProxy getAccessControlProxy() {
        return accessControlProxy;
    }
    
    /**
     * Method ƒë·ªÉ truy c·∫≠p decorated service
     */
    public NotificationServiceComponent getDecoratedService() {
        return decoratedService;
    }
    
    /**
     * Method ƒë·ªÉ truy c·∫≠p caching decorator ƒë·ªÉ qu·∫£n l√Ω cache
     */
    public CachingNotificationServiceDecorator getCachingDecorator() {
        if (decoratedService instanceof CachingNotificationServiceDecorator) {
            return (CachingNotificationServiceDecorator) decoratedService;
        }
        return null;
    }
    
    /**
     * Method ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i singleton
     */
    public boolean isSingletonInitialized() {
        return singletonService.isInitialized();
    }
    
    /**
     * Method ƒë·ªÉ kh·ªüi t·∫°o singleton v·ªõi dependencies th·∫≠t
     * ƒê∆∞·ª£c g·ªçi t·ª´ NotificationConfig sau khi Spring context ƒë∆∞·ª£c t·∫°o
     */
    public void initializeSingleton(NotificationBroadcaster notificationBroadcaster, 
                                   NotificationDao notificationDao, 
                                   UserDao userDao, 
                                   CommentDao commentDao) {
        try {
            singletonService.initialize(notificationBroadcaster, notificationDao, userDao, commentDao);
            System.out.println("‚úÖ Singleton initialized with real dependencies through Adapter + Proxy");
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Error initializing singleton: " + e.getMessage());
            System.err.println("   Make sure all dependencies are properly injected");
        }
    }
}
